#!/usr/bin/env perl
#########
# Author:        Marina Gourtovaia
# Maintainer:    $Author$
# Created:       07 November 2011
# Last Modified: $Date$
# Id:            $Id$
# $HeadURL$
#

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use English qw{-no_match_vars};
use Getopt::Long;
use Pod::Usage;
use File::Basename;

use npg_common::extractor::fastq qw/generate_cache/;

use Readonly;
our $VERSION = '0';

# for each of the fastqcheck files found in the cache dir, check for a rename (necessary
#  for single-end reads with no index cycles - e.g. rrrr_p_1.fastqcheck => rrrr_p.fastqcheck).
#  Determine the corresponding fastq file and its destination. Move the files to their new
#  locations.

sub _move_fastqcheck_files {
  my ($cache, $archive_path) = @_;

  my $pattern = join q[/], $cache, q[*.fastqcheck];
  my @fqc_files = glob $pattern;

  foreach my $fqc_file (@fqc_files) {
    my ($id_run, $position, $end, $tag_index) = $fqc_file =~ /.*\/(\d+)_(\d)(_[\dt])?(\#\d+)?[.]fastq/xms;
    ##no critic (ProhibitParensWithBuiltins)
    my $destination = !defined $tag_index ? $archive_path : join(q[/], $archive_path, "lane$position");
    ##use critic
    my ($fqc_dest, $fq_dest, $fq_src) = _determine_destinations($fqc_file, $destination, $tag_index);

    my $command = "mv $fqc_file $fqc_dest";
    if(system $command) {
      croak qq[Error executing command $command];
    }

    if($fq_dest) {
      $command = "mv $fq_src $fq_dest";
      if(system $command) {
        croak qq[Error executing command $command];
      }

    }
  }

  return;
}

#
# Given a path to a fastqcheck file and the path to the destination directory for this file,
#  determine the destination files for both the fastqcheck file and its corresponding fastq subset
#  file. Also determine the name of the source (this name will vary according to how many sequences
#  appear in the subset file).
#
# Parameters:
#  fqc_src - path to a fastqcheck file
#  dest - destination directory to check for placeholder(s)
#  tag_index - undef unless plexed lane
# Returns: path to destination fastqcheck file, path to fastq subset destination file (optional)
#
sub _determine_destinations {
  my ($fqc_src, $dest, $tag_index) = @_;

  my ($fqc_bn, $fqc_src_dir) = fileparse($fqc_src);

  my ($fqc_dest, $fq_dest, $fq_src); # returned

  $fqc_dest = join q[/], $dest, $fqc_bn;
  if(! -e "$fqc_dest") { # no placeholder, so check for alternate naming convention (for se, no index cycles)

    # determine new fastqcheck destination and (optionally?) new fastq subset file name
    (my $new_fqc_bn = $fqc_bn) =~ s/_\d+[.]/./sxm;
    my $alt_fqc_dest = join q[/], $dest, $new_fqc_bn;

    if(-e "$alt_fqc_dest") { # alternate exists, amend destination(s)
      $fqc_dest = $alt_fqc_dest;  # fastqcheck destination determined

      ($fq_dest, $fq_src) = _fastq_subset_dest($fqc_bn, $new_fqc_bn, $fqc_src_dir, $dest);
    }
    else {
      return; # no destinations - croak, carp or just do nothing?
    }
  }

  if($tag_index and not $fq_dest) { # deal with move of fastq subset file to lane level cache dir
    ($fq_dest, $fq_src) = _fastq_subset_dest($fqc_bn, $fqc_bn, $fqc_src_dir, $dest, $fqc_bn);
  }

  return ($fqc_dest, $fq_dest, $fq_src);
}

#
# determine locations of fastq subset source and destination files based on fastqcheck file locations
#  and names of the source and (possibly amended) destination fastqcheck files
#
sub _fastq_subset_dest {
  my ($fqc_src_bn, $fqc_dest_bn, $fqc_src_dir, $fqc_dest_dir) = @_;

  (my $fq_pat = $fqc_src_bn) =~ s/fastqcheck$/fastq.*/sxm; # pattern for glob for corresponding fastq subset file
  my $fq_pat_path = join q[/], $fqc_src_dir, $fq_pat;
  my @fqs = glob $fq_pat_path;
  if(@fqs != 1) { # should be one-to-one relation between fastqcheck and fastq files
    croak qq[More than one match for $fqc_src_dir/$fq_pat];
  }
  my $fq_file = $fqs[0];
  my ($fq_bn, $fq_src_dir) = fileparse($fq_file);
  my ($end, $tag_index, $select_count) = $fq_bn =~ /\d+_\d(_[\dt])?(\#\d+)?[.]fastq[.](\d+)/sxm;
  (my $fq_dest_bn = $fqc_dest_bn) =~ s/fastqcheck$/fastq.$select_count/sxm;
  my @components = split /\//sxm, $fq_src_dir;
  my $fq_dest_dir = join q[/], $fqc_dest_dir, pop @components;
  if (!-e $fq_dest_dir) {
    mkdir $fq_dest_dir or croak qq[Failed to create a directory $fq_dest_dir];
  }
  elsif (!-d $fq_dest_dir) {
    croak qq[$fq_dest_dir is not a directory];
  }
  my $fq_dest = join q[/], $fq_dest_dir, $fq_dest_bn;

  return ($fq_dest, $fq_file);
}

my $path           = q[];
my $files          = [];
my $sample_size    = undef;
my $help           = q[];

GetOptions (
            'help'            => \$help,
            'path=s'          => \$path,
            'file=s@'         => \$files,
            'sample_size=i'   => \$sample_size,
            );
if ($help) { pod2usage(0); }

my $cache_dir = generate_cache($path, $files, $sample_size);

my $bfile = $files->[0];
if($bfile =~ /[.]bam$/sxm) {
  _move_fastqcheck_files($cache_dir, $path);
}

exit 0;

__END__

=head1 NAME

generate_cached_fasq

=head1 VERSION


=head1 SYNOPSIS

Script to generate a chache of short (usually 10000 reads long) fastq files

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

--path        directory to generate the cache in

--file        input file, can be specified multiple times

--sample_size number of reads to cache

--help        display this message

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DIAGNOSTICS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item FindBin

=item Carp

=item English -no_match_vars

=item Getopt::Long

=item Pod::Usage

=item File::Basename

=item Readonly

=item npg_common::extractor::fastq

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

$Author$

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2011 GRL, by Marina Gourtovaia

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
