#!/usr/bin/env perl
#########
# Author:        jo3
# Maintainer:    $Author$
# Created:
# Last Modified: $Date$
# Id:            $Id$
# $HeadURL$
#

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Readonly; Readonly::Scalar our $VERSION => do { my ($r) = q$Revision$ =~ /(\d+)/msx; $r; };
use npg_common::bam_align;

#**********************************************************
#**********************************************************
#        Change debug to 0 before releasing!
#**********************************************************
#**********************************************************

my $align_job = npg_common::bam_align->new_with_options();

$align_job->run();

1;
__END__


=head1 NAME

bam_aligner - align the sequence data in a bam file

=head1 VERSION

$Revision$

=head1 SYNOPSIS

iget /seq/5363/5363_1.bam - | bam_aligner > output.bam

iget /seq/5363/5363_1.bam - | bam_aligner --index_base /path/to/index/basename

iget /seq/5363/5363_1.bam - | bam_aligner --organism Human --strain NCBI36

iget /seq/5363/5363_1.bam - | bam_aligner --aligner bowtie

cat 5567_8.bam | bam_aligner --comment 'This text will be saved in the bam header'

To list all options use:

bam_aligner --help

For use with LSF, you'll need to reserve more than 10Gb of memory, e.g.

bsub -M11000000 -R'select[mem>11000] rusage[mem=11000]' \
 'iget /seq/5363/5363_1.bam | bam_aligner > 5363_1_re-align.bam'

=head1 USAGE

=head1 DESCRIPTION

Take a BAM file as piped input, save the header file, extract the sequence,
align it to a reference sequence, update the header and output a new BAM
format alignment.

The BAM file is piped to the script on STDIN using iget or cat.

The default aligner is bwa but another can be specified by a command line
argument and optionally with another argument specifying the path which
contains the executable (if the user wants to use a customized or beta
version for example).

If only the name is supplied the script will use the current version from the
NPD aligner collection. In only the path is supplied the script assumes the
last element is the name of the aligner, e.g. --aligner_path /here/is/bwa/
will set the aligner to 'bwa'.

Currently only bwa or bowtie can be used.

The reference should be specified by command line argument either as a species
name (and, optionally, a strain/version name) or as a path, giving the
basename of the aligner index file. If only the species name is supplied the
default strain/version for that organism in the NPD reference collection for
that species will be used.

The species and strain names are case-insenstive, and common names may be
used for the species (provided there is a link in the reference collection).
Scientific names may be specified as, e.g., --species 'Homo sapiens' or as
--species Homo_sapiens

If the species isn't supplied the script will try to determine it from the BAM
header. If it can't do that it will croak.

If both organism and aligner_index are both specified, the organism option is
ignored. There is no check to see if they disagree. Nor will the script check
for conflicts between the aligner_index and the aligner argument.

The script will automatically include a comment in the output BAM header
detailing the version of this script. An additional comment can be included
by the user with the --comment option.

=head1 SUBROUTINES/METHODS

None

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=head1 EXIT STATUS

=head1 DIAGNOSTICS

=head1 CONFIGURATION

=head1 CONFIGURATION AND ENVIRONMENT

The first step the script takes is to sort the reads by name. This can be
very demanding on disk space as the sort function can write many temporary
files to disk. This can be problematic when several parallel jobs are run.

The script can also make heavy demands on memory, depending on the size of the
input BAM file, the reference genome and the aligner used. The initial sort
step should run within 10Gb of RAM, but the requirements of the aligner after
this step are harder to predict and the example LSF submission above may have
to be adjusted.

The script will try to work in the user's scratch area or, if that's not
found, the user's tmp diretory. This can be overridden with a command line
argument.

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item FindBin

=item npg_common::bam_align

=back

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

If there are user-defined read tags in the input bam file that are related
directly, or indirectly (e.g. quality values) to the read sequence, and if
the read changes strand in the new alignment, these tags will no long be
accurate as the script makes no attempt to reverse, or reverse-complement
user-defined tags.

=head1 AUTHOR

John O'Brien, E<lt>jo3@sanger.ac.ukE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2010 GRL, by John O'Brien

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
